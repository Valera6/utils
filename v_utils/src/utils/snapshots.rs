struct PlotData {
	scale: f64,
	offset: f64,
	blocks: [char; 9],
}

impl PlotData {
	fn new(min_val: f64, max_val: f64, height: usize) -> Self {
		let data_range = max_val - min_val;
		let plot_range = (height * 8) as f64;
		let scale = plot_range / data_range;
		let offset = min_val * scale;
		let blocks = [' ', '▁', '▂', '▃', '▄', '▅', '▆', '▇', '█'];
		PlotData { scale, offset, blocks }
	}

	fn get_block_index(&self, val: f64, i: usize) -> usize {
		let scaled_val = val * self.scale - self.offset;
		(scaled_val - i as f64 * 8.0).clamp(0.0, 8.0) as usize
	}

	fn raise_plot(&mut self) {
		self.offset -= 1.0; // Raise by the smallest step (▁)
	}
}

/// Recommended width x height: 90 x 12
pub fn snapshot_plot_p(arr: &[f64], width: usize, height: usize) -> String {
	if arr.is_empty() {
		return String::from("Empty array");
	}

	let min_val = arr.iter().fold(f64::INFINITY, |a, &b| a.min(b));
	let max_val = arr.iter().fold(f64::NEG_INFINITY, |a, &b| a.max(b));

	if (max_val - min_val).abs() < f64::EPSILON {
		return " ".repeat(width).repeat(height);
	}

	let mut plot_data = PlotData::new(min_val, max_val, height);

	// Check if we need to raise the plot
	let first_block = plot_data.get_block_index(arr[0], height - 1);
	let last_block = plot_data.get_block_index(arr[arr.len() - 1], height - 1);
	if first_block == 0 || last_block == 0 {
		plot_data.raise_plot();
	}

	let mut plot = Vec::with_capacity(height);

	for i in (0..height).rev() {
		let row: String = (0..width)
			.map(|j| {
				let index = (j as f64 * arr.len() as f64 / width as f64) as usize;
				let val = arr[index];
				let block_index = plot_data.get_block_index(val, i);
				plot_data.blocks[block_index]
			})
			.collect();
		plot.push(row);
	}

	plot.join("\n")
}

#[cfg(test)]
mod tests {
	use super::*;
	use insta::assert_snapshot;

	#[test]
	fn test_snapshot_plot_p_laplace() {
		#[rustfmt::skip]
		let data = vec![100.0, 99.98034123405445, 100.0347290174959, 100.48839759605941, 99.62133401559197, 101.38574519793993, 101.6684245335374, 101.65966766136323, 101.70648749936485, 102.6232010411682, 102.97313350013474, 101.55631004207399, 100.25871594663444, 100.52272804857675, 100.58314893786022, 100.64283254607244, 100.73433531354823, 100.69221517631237, 100.09351720527273, 100.67293466664673, 100.64235444424168, 100.37334762199043, 101.05505250560705, 101.96492364175322, 102.2552341902445, 102.4643771874453, 103.00400856658018, 103.0770079705397, 103.02995640665938, 102.38206280914957, 101.44333626880916, 101.01280839314724, 100.9499248204719, 101.78576790776899, 102.10434545937888, 102.41886658150547, 101.8961177804279, 101.91029272363858, 104.75134118777744, 104.6278560056506, 104.58452393952936, 104.21408906771778, 103.83574406047777, 103.88493636600897, 103.59095001733286, 102.99965993528096, 103.08175530600438, 102.23148201587901, 102.38348765012664, 102.68463685169142, 102.78148763710935, 102.48123981286992, 102.87908213769386, 101.54193253304851, 102.05643181896018, 103.26123912359945, 103.69839088086984, 103.83468348905919, 104.04304962479134, 104.95516117788536, 104.92389865980158, 105.35315115800985, 104.7544940516362, 105.36401129198312, 105.37857194360474, 106.45390037633943, 105.00661272503059, 105.82631191045223, 106.28603604450699, 106.66008635913374, 105.11486352514159, 105.34500651042048, 105.23385387405953, 104.85123641027657, 105.39713078569835, 105.55530324795174, 105.79159364234994, 105.92782737092307, 108.05899313915141, 107.89735278459993, 108.43341001175129, 108.32542181864629, 108.33872576814629, 108.33443914321589, 108.55780426988207, 108.4253892576315, 107.50736654802179, 107.62402763087272, 107.51398114643504, 107.47638374795653, 107.55541974293325, 107.94972268681686, 108.00694173462705, 108.7869334128387, 107.90069882793894, 107.5365360328119, 106.69100048255488, 106.63267206807168, 107.03367790159332, 106.33479734000295, 106.585157352886];

		assert_snapshot!(snapshot_plot_p(&data, 90, 12), @r###"
                                                                        ▁ ▅▄▄▆▅      █      
                                                                        █▇█████▃▄▃▃▄██▇▃    
                                                                ▂       ████████████████▃▂▆ 
                                                            █ ▁▆█     ▁▃███████████████████▇
                                                         ▅ ▅█▁███▂▄▃▅▇██████████████████████
                                    ▆▅▄▁               ███▆█████████████████████████████████
                                    ████▅▅▂         ▃▅▇█████████████████████████████████████
           ▄              ▄▄        ███████▅  ▁▂ ▃  ████████████████████████████████████████
           █           ▁▄▆██▅    ▃▆ ████████▄▅██▆█ ▂████████████████████████████████████████
       ▃▆▆▆█▅          ██████▄  ▇█████████████████▅█████████████████████████████████████████
     ▂ ██████ ▂▃▃▄▄▄▃ ████████▇▆████████████████████████████████████████████████████████████
  ▄▄▅█▁██████▇██████████████████████████████████████████████████████████████████████████████
  "###);
	}
}
